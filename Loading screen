import React, { useState, useEffect } from 'react';

const MyComponent = () => {
  const [data, setData] = useState(null);  // To store fetched data
  const [loading, setLoading] = useState(true);  // To track loading state
  const [isLoggedIn, setIsLoggedIn] = useState(false);  // To track login status
  const [error, setError] = useState(null);  // To handle any errors (like auto-logout)

  // Set the session expiration time (30 minutes)
  const sessionTimeout = 30 * 60 * 1000;  // 30 minutes in milliseconds

  useEffect(() => {
    // Check if the user is logged in by reading localStorage
    const loggedInStatus = localStorage.getItem('isLoggedIn');
    if (loggedInStatus) {
      setIsLoggedIn(true);
      fetchData();  // Fetch data if logged in
      setUpAutoLogout();  // Start the auto logout timer
    } else {
      setIsLoggedIn(false);  // If not logged in, show the login screen
    }

    // Function to reset the logout timer on user interaction
    const resetTimer = () => {
      clearTimeout(logoutTimer);  // Clear the previous timeout
      setUpAutoLogout();  // Set a new timeout (start 30 minutes again)
    };

    // Listen for any click or key press to reset the timer
    window.addEventListener('click', resetTimer);
    window.addEventListener('keydown', resetTimer);

    // Clean up the event listeners when the component unmounts
    return () => {
      window.removeEventListener('click', resetTimer);
      window.removeEventListener('keydown', resetTimer);
    };
  }, []);

  // Function to set up auto logout after 30 minutes
  const setUpAutoLogout = () => {
    logoutTimer = setTimeout(() => {
      localStorage.removeItem('isLoggedIn');  // Remove login state from localStorage
      setIsLoggedIn(false);  // Update UI state
      setLoading(false);  // Stop the loading screen
      setError('You have been logged out due to inactivity.');  // Show logout message
    }, sessionTimeout);
  };

  // Simulated data fetching function
  const fetchData = async () => {
    try {
      // Simulate data fetching with setTimeout (use actual API request in real use cases)
      setTimeout(() => {
        const result = { name: 'John', age: 30 };  // Simulated data
        setData(result);  // Store data in state
        setLoading(false);  // Set loading state to false after data is fetched
      }, 2000);  // Simulate network delay (2 seconds)
    } catch (error) {
      console.error('Error fetching data:', error);
      setLoading(false);  // Stop loading if error occurs
    }
  };

  // If there's an error (like the user being logged out), show a message
  if (error) {
    return <div>{error}</div>;
  }

  // If the user is not logged in, show the login message
  if (!isLoggedIn) {
    return <div>Please log in first!</div>;
  }

  // If loading is true, show the loading screen
  if (loading) {
    return <div>Loading...</div>;
  }

  // Once data is fetched and user is logged in, show the data
  return (
    <div>
      <h1>Fetched Data:</h1>
      <p>Name: {data.name}</p>
      <p>Age: {data.age}</p>
    </div>
  );
};

export default MyComponent;
